import { app, BrowserWindow, Menu, session } from 'electron';
import { Global } from './global';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // 检测是否存在认证文件，并且检测机器码
  if(!checkIdentity()) {
    let promptWindow = new BrowserWindow({
      height: 270,
      width: 500,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        nodeIntegration: true,
        webSecurity: false,
        contextIsolation: false,
      },
    });
    promptWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + '#/input');
    promptWindow.maximize();
    Menu.setApplicationMenu(null);
    return;
  }

  
  // Create the browser window.
  Global.mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      webSecurity: false,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  Global.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  Global.mainWindow.webContents.openDevTools();

  // let the window fill the screen
  Global.mainWindow.maximize()

  // set the menu of main window
  initMenu();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.

  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// when web content was created
app.on('web-contents-created', (e, webContents) => {
  webContents.on('did-navigate', function(e, url) {
    console.log(url);
    // 获取登录参数
    // if(url.indexOf("https://www.erp321.com/") && !url.indexOf("https://ww.erp321.com/login.aspx")) {
    if(url.indexOf("gyl.scm121.com/") > 0 && url.indexOf("/user/login") == -1) {
      session.defaultSession.cookies.get({ url })
      .then((cookies) => {
        let cookie = cookies.find((cookie) => cookie.name == "DISTRYBUTION_TOKEN");
        if (cookie) {
          Global.cookie = cookie['value'];
        }
        Global.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
      }).catch((error) => {
        console.log(error)
      })
    }
  })
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import './events'
import { initMenu } from './menu';
import { initDatabase } from './db';
import { existsSync } from 'fs';
import { machineIdSync } from 'node-machine-id';
import { checkIdentity } from './auth';

if(!existsSync('data.sqlite')) {
  initDatabase().then(() => console.log('初始化成功'))
}
